{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw Error(`Cannot fetch URL data for resource: ${url}`);\n        }\n        const result = await response.json();\n        setData(result);\n        setError(null);\n        setIsPending(false);\n      } catch (err) {\n        setIsPending(false);\n        setError(err.message);\n      }\n    };\n    fetchData();\n\n    // The empty dependency array ensures that this effect runs only once (on mount)\n  }, []);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"RG7geX7o/76PnTYec+FAhGpDNXA=\");\nexport default useFetch;","map":{"version":3,"names":["useEffect","useState","useFetch","url","_s","data","setData","error","setError","isPending","setIsPending","fetchData","response","fetch","ok","Error","result","json","err","message"],"sources":["C:/Users/cagne/Documents/AUF23/CSC 3700/Week13/final-hw/src/Components/useFetch.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst useFetch = (url) => {\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [isPending, setIsPending] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw Error(`Cannot fetch URL data for resource: ${url}`);\r\n                }\r\n                const result = await response.json();\r\n                setData(result);\r\n                setError(null);\r\n                setIsPending(false);\r\n            } catch (err) {\r\n                setIsPending(false);\r\n                setError(err.message);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n\r\n        // The empty dependency array ensures that this effect runs only once (on mount)\r\n    }, []);\r\n\r\n    return { data, isPending, error };\r\n};\r\n\r\nexport default useFetch;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACZ,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,GAAG,CAAC;QACjC,IAAI,CAACS,QAAQ,CAACE,EAAE,EAAE;UACd,MAAMC,KAAK,CAAE,uCAAsCZ,GAAI,EAAC,CAAC;QAC7D;QACA,MAAMa,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QACpCX,OAAO,CAACU,MAAM,CAAC;QACfR,QAAQ,CAAC,IAAI,CAAC;QACdE,YAAY,CAAC,KAAK,CAAC;MACvB,CAAC,CAAC,OAAOQ,GAAG,EAAE;QACVR,YAAY,CAAC,KAAK,CAAC;QACnBF,QAAQ,CAACU,GAAG,CAACC,OAAO,CAAC;MACzB;IACJ,CAAC;IAEDR,SAAS,CAAC,CAAC;;IAEX;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEN,IAAI;IAAEI,SAAS;IAAEF;EAAM,CAAC;AACrC,CAAC;AAACH,EAAA,CA5BIF,QAAQ;AA8Bd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}