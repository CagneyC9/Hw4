{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nconst useFetch = urls => {\n  _s();\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  useEffect(() => {\n    const fetchMultipleURLs = async () => {\n      try {\n        const requests = urls.map(async url => {\n          const response = await fetch(url);\n          if (!response.ok) {\n            throw Error(`Cannot fetch data for resource: ${url}`);\n          }\n          return response.json();\n        });\n        const results = await Promise.all(requests);\n        setData(results);\n        setError(null);\n        setIsPending(false);\n      } catch (err) {\n        setIsPending(false);\n        setError(err.message);\n      }\n    };\n    fetchMultipleURLs();\n\n    // The empty dependency array ensures that this effect runs only once (on mount)\n  }, []);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"CGf6QC/l3EiQFaOMMCvZ0+9/PNU=\");\nexport default useFetch;","map":{"version":3,"names":["useEffect","useState","useFetch","urls","_s","data","setData","error","setError","isPending","setIsPending","fetchMultipleURLs","requests","map","url","response","fetch","ok","Error","json","results","Promise","all","err","message"],"sources":["C:/Users/cagne/Documents/AUF23/CSC 3700/Week13/final-hw/src/Components/useFetch.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst useFetch = (urls) => {\r\n    const [data, setData] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [isPending, setIsPending] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchMultipleURLs = async () => {\r\n            try {\r\n                const requests = urls.map(async (url) => {\r\n                    const response = await fetch(url);\r\n                    if (!response.ok) {\r\n                        throw Error(`Cannot fetch data for resource: ${url}`);\r\n                    }\r\n                    return response.json();\r\n                });\r\n\r\n                const results = await Promise.all(requests);\r\n                setData(results);\r\n                setError(null);\r\n                setIsPending(false);\r\n            } catch (err) {\r\n                setIsPending(false);\r\n                setError(err.message);\r\n            }\r\n        };\r\n\r\n        fetchMultipleURLs();\r\n\r\n        // The empty dependency array ensures that this effect runs only once (on mount)\r\n    }, []);\r\n\r\n    return { data, isPending, error };\r\n};\r\n\r\nexport default useFetch;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAIC,IAAI,IAAK;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACZ,MAAMW,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACA,MAAMC,QAAQ,GAAGT,IAAI,CAACU,GAAG,CAAC,MAAOC,GAAG,IAAK;UACrC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;UACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;YACd,MAAMC,KAAK,CAAE,mCAAkCJ,GAAI,EAAC,CAAC;UACzD;UACA,OAAOC,QAAQ,CAACI,IAAI,CAAC,CAAC;QAC1B,CAAC,CAAC;QAEF,MAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACV,QAAQ,CAAC;QAC3CN,OAAO,CAACc,OAAO,CAAC;QAChBZ,QAAQ,CAAC,IAAI,CAAC;QACdE,YAAY,CAAC,KAAK,CAAC;MACvB,CAAC,CAAC,OAAOa,GAAG,EAAE;QACVb,YAAY,CAAC,KAAK,CAAC;QACnBF,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;MACzB;IACJ,CAAC;IAEDb,iBAAiB,CAAC,CAAC;;IAEnB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEN,IAAI;IAAEI,SAAS;IAAEF;EAAM,CAAC;AACrC,CAAC;AAACH,EAAA,CAhCIF,QAAQ;AAkCd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}